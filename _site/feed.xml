<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fernandonogueira.io</title>
    <description>Fernando Nogueira Tech Blog
</description>
    <link>http://fernandonogueira.io/</link>
    <atom:link href="http://fernandonogueira.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Jun 2016 21:56:43 -0300</pubDate>
    <lastBuildDate>Sun, 12 Jun 2016 21:56:43 -0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>ChatOps - Comunicação, Deployments rápidos, times satisfeitos.</title>
        <description>&lt;h2 id=&quot;chatops---o-que-&quot;&gt;ChatOps - o que é?&lt;/h2&gt;
&lt;p&gt;Vamos começar por aqui.&lt;/p&gt;

&lt;p&gt;ChatOps é um termo muito creditado ao pessoal do Github. Se formos resumir, podemos dizer que é “&lt;em&gt;conversation-driven development&lt;/em&gt;”. Usando um &lt;em&gt;bot&lt;/em&gt; com &lt;em&gt;plugins&lt;/em&gt; e &lt;em&gt;scripts&lt;/em&gt;, os times podem automatizar tarefas e colaborar, jogando fora os procedimentos repetitivos e economizando tempo.&lt;/p&gt;

&lt;p&gt;Para aplicar isso, os times usam bots para automatizar os procedimentos manuais e repetitivos. Alguns dos mais conhecidos são o &lt;a href=&quot;https://hubot.github.com&quot;&gt;Hubot&lt;/a&gt; e o &lt;a href=&quot;https://www.lita.io&quot;&gt;Lita&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fernandonogueira.io/assets/images/2015/07/hubot.png&quot; alt=&quot;hubot-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-namedeployments-praticosadeployments-prticos&quot;&gt;&lt;a name=&quot;deployments-praticos&quot;&gt;&lt;/a&gt;Deployments práticos&lt;/h2&gt;
&lt;p&gt;Podemos usar &lt;em&gt;bots&lt;/em&gt; para automatizar muitas coisas, como realizar &lt;em&gt;backups&lt;/em&gt;, notificar colaboradores sobre algum evento (alguma modificação em &lt;em&gt;issues&lt;/em&gt;/&lt;em&gt;tasks&lt;/em&gt;, por exemplo), preparação de novos ambientes, &lt;em&gt;code deployments&lt;/em&gt;, etc. Hoje focarei mais no último: &lt;em&gt;&lt;strong&gt;code deployments&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sabe aquele procedimento chato que você teve que fazer com Shell Script? Copiava uma coisa pra uma máquina, rodava um script alí, mudava umas configurações e rodava a aplicação? É ele mesmo que vamos focar aqui. Vamos acabar com isso. Vamos mandar os bots fazerem tudo pra nós. Quando terminarem que nos avise.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;imagem-exemplo-deployment&quot;&gt;&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;http://fernandonogueira.io/assets/images/2015/07/chatops-1-jarvis-deploy2.png&quot; alt=&quot;bots-escravos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gostou da ideia?&lt;/p&gt;

&lt;h2 id=&quot;code-deployments---frequncia-e-durao&quot;&gt;&lt;em&gt;Code deployments&lt;/em&gt; - Frequência e duração&lt;/h2&gt;
&lt;p&gt;A frequência do &lt;em&gt;deploy&lt;/em&gt; do(s) produto(s) que você trabalha diariamente, provavelmente, tem relação com o tempo gasto para cada &lt;em&gt;deployment&lt;/em&gt; que é feito nos ambientes de qualidade/&lt;em&gt;staging&lt;/em&gt; e produção. &lt;/p&gt;

&lt;p&gt;Esse assunto é velho, mas será que seu time está tirando o maior proveito possível deste processo? Não temos como saber, mas se os seus &lt;em&gt;deploys&lt;/em&gt; não estão muito frequentes, talvez seja um sinal que é possível melhorar.&lt;/p&gt;

&lt;h2 id=&quot;contextualizao&quot;&gt;Contextualização&lt;/h2&gt;
&lt;p&gt;Esse negócio de ChatOps surgiu na minha vida profissional em um time que o adotou quando estava começando a trabalhar com alguns elementos que até “pouco” tempo atrás eram novidade: &lt;em&gt;feature branches&lt;/em&gt;, &lt;em&gt;microservices&lt;/em&gt;, etc. Meu desafio aqui, é relatar a experiência e os benefícios identificados em uma equipe em que tais práticas foram adotadas, já o seu é perceber se há ou não benefícios para seu time adotar algo aqui dito.&lt;/p&gt;

&lt;p&gt;Claro que tudo é questão de perspectiva. Alguns times adotaram, outros não quiseram ou não tiveram necessidade. O fato é que hoje &lt;em&gt;feature branches&lt;/em&gt; e &lt;em&gt;microservices&lt;/em&gt; são assuntos massificados e muitas vezes precisamos tornar certos procedimentos mais eficientes, mas a história aqui é outra. Vamos em frente. &lt;/p&gt;

&lt;p&gt;Até aqui… Lhe contextualizei o suficiente?&lt;/p&gt;

&lt;p&gt;O motivo de adotarmos tais praticas posso contar no futuro. A escolha é do leitor.&lt;/p&gt;

&lt;p&gt;Então voltemos a focar apenas no nosso processo de &lt;em&gt;code deployment&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-vida-do-time-antes-do-chatops&quot;&gt;A vida do time antes do ChatOps&lt;/h2&gt;
&lt;p&gt;O processo de &lt;em&gt;deploy&lt;/em&gt; durava até 30 minutos. O time utilizava apenas o Bamboo, da Atlassian, para integração contínua.&lt;/p&gt;

&lt;p&gt;O elemento mais adequado para ser classificado como “legado” do nosso sistema é o servidor web, escrito em Java, que publica uma API REST para ser consumida pelo front-end e pelas aplicações móveis (iOS e Android).&lt;br /&gt;
Este servidor Java, era o qual mais realizávamos &lt;em&gt;deployments&lt;/em&gt; diariamente. Tanto pelo time de qualidade, quanto pelo time de operações, em produção. &lt;br /&gt;
O processo de &lt;em&gt;deploy&lt;/em&gt; era muito lento, principalmente para o time de qualidade.&lt;/p&gt;

&lt;p&gt;O time de &lt;em&gt;QA&lt;/em&gt; realizava procedimentos manuais como baixar o artefato, fazer acesso remoto (SSH), etc. mas tudo começava pelo &lt;em&gt;build&lt;/em&gt;, que era composto por: &lt;br /&gt;
- Rodar testes unitários;&lt;br /&gt;
- Gerar o artefato no servidor de &lt;em&gt;CI&lt;/em&gt; (Bamboo);&lt;br /&gt;
- Rodar análise de qualidade do Sonarqube;&lt;br /&gt;
- Baixar o artefato gerado (.war);&lt;br /&gt;
- Enviar para o servidor e rodar um script para  realizar a atualização.&lt;/p&gt;

&lt;p&gt;Agora, imagine esses passos para cada &lt;em&gt;feature branch&lt;/em&gt; a ser testado pela qualidade? Pois é! Muito tempo perdido!&lt;br /&gt;
Além disso, o time de qualidade possuía alguns ambientes para testar, e eles precisavam saber de forma rápida qual versão/&lt;em&gt;feature branch&lt;/em&gt;/&lt;em&gt;revision&lt;/em&gt; estava rodando em cada um destes ambientes. Como resolver?&lt;/p&gt;

&lt;p&gt;Com ChatOps!&lt;/p&gt;

&lt;h2 id=&quot;bots-so-divertidos&quot;&gt;Bots são divertidos&lt;/h2&gt;
&lt;p&gt;Nesse ponto, decidimos testar a ideia e encontramos o &lt;em&gt;&lt;strong&gt;Hubot&lt;/strong&gt;&lt;/em&gt; e outras ferramentas divertidas. Decidimos também descomplicar tudo que fosse possível, mantendo apenas o que fosse necessário para não retroceder na qualidade do software.&lt;br /&gt;
O Hubot nos permite usar &lt;a href=&quot;http://coffeescript.org&quot;&gt;&lt;em&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; para criar scripts e construir comandos que fazem o trabalho daqueles passos manuais, assim podemos descarta-los. &lt;br /&gt;
Todo processo que antes era feito de forma manual ou que é dispendioso, podemos deixar por conta do Hubot.&lt;br /&gt;
Onde existem vários passos, podemos transformar em apenas um comando, como &lt;code&gt;hubot do stuff&lt;/code&gt; e ele fará por você, como pode ver em uma das &lt;a href=&quot;#imagem-exemplo-deployment&quot;&gt;imagens mostradas anteriormente&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É nesse ponto que começa a diversão!&lt;/p&gt;

&lt;p&gt;Nosso objetivo era realizar automaticamente todos aqueles procedimentos que precisavam ser feitos de forma semi-manual, focando no &lt;em&gt;code deployment&lt;/em&gt;.&lt;br /&gt;
O que quero dizer com focar no &lt;em&gt;code deployment&lt;/em&gt;?&lt;br /&gt;
O Bamboo realiza varias tasks para garantir a qualidade do software. Algumas dessas tasks são meio lentas, e se precisássemos esperar por elas diversas vezes por dia, resultava em muito tempo perdido.&lt;/p&gt;

&lt;p&gt;Com isso, &lt;strong&gt;pelo menos por enquanto (quem sabe?)&lt;/strong&gt;, precisamos manter o Bamboo para continuar executando os procedimentos que asseguram o rastreio da qualidade do software, mas podemos utilizar outras ferramentas em paralelo para realizar o deploy. O Bamboo continua gerando artefatos, rodando Sonarqube, etc e, em paralelo, fazemos nossos deploys. :)&lt;/p&gt;

&lt;p&gt;Precisamos de um aplicativo de &lt;strong&gt;IM&lt;/strong&gt; (&lt;em&gt;Instant Messaging&lt;/em&gt;) qualquer para utilizar com o Hubot (IRC, Flowdock, Slack, HipChat, etc). Escolhemos o &lt;strong&gt;Slack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Até aqui:&lt;br /&gt;
* Matemos o Bamboo para rodar todas as tarefas que asseguram a qualidade do software;&lt;br /&gt;
* Escolhemos o Hubot para ser nosso bot.&lt;br /&gt;
* Escolhemos o Slack como IM.&lt;/p&gt;

&lt;p&gt;Com ChatOps, o deployment pode ser iniciado por qualquer um e, ainda, de forma assíncrona. Desta forma, precisamos de um lugar para centralizar o controle de todos os deployments.&lt;/p&gt;

&lt;p&gt;Por isso, precisamos entender um pouco a API de Deployments do Github, pois tudo gira em torno dela. É lá que vamos centralizar o controle de nossos deployments.&lt;/p&gt;

&lt;h2 id=&quot;descobrindo-a-api-de-deployments-do-github&quot;&gt;Descobrindo a API de Deployments do Github&lt;/h2&gt;

&lt;p&gt;O Github lançou há um tempo a API de Deployments. &lt;br /&gt;
Resumindo, ela serve meio como um CRUD de deployments.&lt;/p&gt;

&lt;p&gt;Você pode criar um Deployment e relacionar ele a uma &lt;em&gt;revision&lt;/em&gt;/&lt;em&gt;tag&lt;/em&gt;/&lt;em&gt;branch&lt;/em&gt; do seu projeto/repositório.&lt;/p&gt;

&lt;p&gt;O Github vai guardar isso e você pode registrar &lt;strong&gt;&lt;em&gt;webhooks&lt;/em&gt;&lt;/strong&gt; para que outra ferramenta faça alguma coisa após a criação deste &lt;em&gt;deployment&lt;/em&gt;, como por exemplo realizar o deployment propriamente dito.&lt;/p&gt;

&lt;p&gt;Esse deployment registrado no Github pode ter seu status atualizado (&lt;strong&gt;&lt;em&gt;pending&lt;/em&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;em&gt;started&lt;/em&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;em&gt;completed&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Abaixo tem um diagrama de sequencia retirado de uma &lt;a href=&quot;https://developer.github.com/v3/repos/deployments/&quot;&gt;página do Github&lt;/a&gt; que fala sobre essa API de Deployments. Dê uma olhada:&lt;/p&gt;

&lt;pre&gt;
+---------+             +--------+            +-----------+        +-------------+
| Tooling |             | GitHub |            | 3rd Party |        | Your Server |
+---------+             +--------+            +-----------+        +-------------+
     |                      |                       |                     |
     |  Create Deployment   |                       |                     |
     |---------------------&amp;gt;|                       |                     |
     |                      |                       |                     |
     |  Deployment Created  |                       |                     |
     |&amp;lt;---------------------|                       |                     |
     |                      |                       |                     |
     |                      |   Deployment Event    |                     |
     |                      |----------------------&amp;gt;|                     |
     |                      |                       |     SSH+Deploys     |
     |                      |                       |--------------------&amp;gt;|
     |                      |                       |                     |
     |                      |   Deployment Status   |                     |
     |                      |&amp;lt;----------------------|                     |
     |                      |                       |                     |
     |                      |                       |   Deploy Completed  |
     |                      |                       |&amp;lt;--------------------|
     |                      |                       |                     |
     |                      |   Deployment Status   |                     |
     |                      |&amp;lt;----------------------|                     |
     |                      |                       |                     |
&lt;/pre&gt;

&lt;h2 id=&quot;colando-as-partes&quot;&gt;Colando as partes&lt;/h2&gt;

&lt;p&gt;Tá. Agora vamos juntar as partes.&lt;/p&gt;

&lt;p&gt;Tem um script do Hubot para registrar os &lt;em&gt;deployments&lt;/em&gt; lá na API do Github. O &lt;a href=&quot;https://github.com/atmos/hubot-deploy&quot;&gt;hubot-deploy&lt;/a&gt;, do &lt;a href=&quot;https://github.com/atmos&quot;&gt;@atmos&lt;/a&gt;. Vamos usa-lo pra criar nosso deployments.&lt;/p&gt;

&lt;p&gt;Porém, os deployments criados no Github precisam ser coordenados. É necessário também ter alguma ferramenta para receber os &lt;em&gt;webhooks&lt;/em&gt; de deployment do Github. No diagrama acima, essa ferramenta está descrita como &lt;code&gt;3rd Party&lt;/code&gt;. &lt;br /&gt;
Tem um projeto, também de autoria do &lt;a href=&quot;https://github.com/atmos&quot;&gt;@atmos&lt;/a&gt;, para isso: o &lt;a href=&quot;https://github.com/atmos/heaven&quot;&gt;heaven&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O Heaven possui integração com diversas ferramentas de deployment. Sozinho ele basicamente consome a API do Github e identifica qual repositório precisa clonar e qual &lt;em&gt;revision&lt;/em&gt; precisa fazer checkout. O resto do trabalho ele deixa com alguma ferramenta a &lt;em&gt;sua&lt;/em&gt; escolha. Essa ferramenta pode ser uma das disponíveis ou facilmente você pode escrever uma simples classe Ruby e fazer do seu jeito.&lt;/p&gt;

&lt;p&gt;Ele possui integração com &lt;strong&gt;fabric&lt;/strong&gt;, &lt;strong&gt;capistrano&lt;/strong&gt;, &lt;strong&gt;AWS OPSWorks&lt;/strong&gt; e algumas outras já prontas.&lt;/p&gt;

&lt;p&gt;Nós escolhemos utilizar o &lt;a href=&quot;http://www.fabfile.org&quot;&gt;fabric&lt;/a&gt;, que é um framework simples feito em python para realizar deployments em múltiplas máquinas.&lt;/p&gt;

&lt;p&gt;Lá é que rodamos o &lt;code&gt;mvn clean package&lt;/code&gt; para gerar o &lt;code&gt;.war&lt;/code&gt; (Java, não é?) e enviamos para o servidor, que está na nuvem (na &lt;a href=&quot;http://www.fabfile.org&quot;&gt;AWS&lt;/a&gt;, no caso), realizamos as configurações e tudo que for necessário para deixar a aplicação atualizada e funcionando.&lt;/p&gt;

&lt;h2 id=&quot;hmm-e-a-tem-vantagem&quot;&gt;Hmm… E aí, tem vantagem?&lt;/h2&gt;

&lt;p&gt;No fim, ficou assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---------+             +--------+            +----------+         +-------------+
|  Hubot  |             | GitHub |            |  Heaven  |         | Your Server |
+---------+             +--------+            +----------+         +-------------+
     |                      |                       |                     |
     |  Create Deployment   |                       |                     |
     |---------------------&amp;gt;|                       |                     |
     |                      |                       |                     |
     |  Deployment Created  |                       |                     |
     |&amp;lt;---------------------|                       |                     |
     |                      |                       |                     |
     |                      |   Deployment Event    |                     |
     |                      |----------------------&amp;gt;|                     |
     |                      |                       |     SSH+Deploys     |
     |                      |                       |--------------------&amp;gt;|
     |                      |                       |                     |
     |                      |   Deployment Status   |                     |
     |                      |&amp;lt;----------------------|                     |
     |                      |                       |                     |
     |                      |                       |   Deploy Completed  |
     |                      |                       |&amp;lt;--------------------|
     |                      |                       |                     |
     |                      |   Deployment Status   |                     |
     |                      |&amp;lt;----------------------|                     |
     |                      |                       |                     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Um simples comando e todo o trabalho de deployment é feito pra nós:&lt;br /&gt;
&lt;img src=&quot;http://fernandonogueira.io/assets/images/2015/07/chatops-1-jarvis-deploy2.png&quot; alt=&quot;bots-escravos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como pode ver, o tempo para realizar o deployment e ter a aplicação funcionando, é de 3 minutos hoje em dia. Eu mencionei anteriormente que esse tempo era por volta de ~15 minutos.&lt;/p&gt;

&lt;p&gt;Além disso, todos do time podem ver o que está acontecendo e quais ambientes estão sendo utilizados. Isso economiza tempo. Ninguém precisa parar ninguém para perguntar. (Lembra que antes o time precisava criar um controle para saber qual versão/branch estava em cada ambiente?!)&lt;/p&gt;

&lt;p&gt;O hubot-deploy também disponibiliza outros comandos interessantes como o que lista os deployments realizados em um ambiente específico: &lt;code&gt;hubot deploys PROJECT in ENV&lt;/code&gt;. Esse comando ajuda a saber quais &lt;em&gt;feature branches&lt;/em&gt; estão aplicados em cada um dos seus ambientes ou qual versão está em produção, por exemplo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fernandonogueira.io/assets/images/2015/07/hubot-deploys-env.png&quot; alt=&quot;hubot-deploys-env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Isso tudo deixou o time mais rápido, os deployments mais rápidos e, consequentemente, melhorou todo o processo do time em geral, mitigando o tempo perdido com tudo o que foi mencionado neste post.&lt;/p&gt;

&lt;p&gt;Posteriormente, caso exista interesse, posso criar um tutorial envolvendo hubot, hubot-deploy, heaven e fabric.&lt;/p&gt;

&lt;p&gt;Mas e aí? Será que isso traria alguma vantagem para o seu time? Isso é só uma das poucas coisas que podemos fazer com o Hubot.&lt;br /&gt;
;)&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Jul 2015 00:45:49 -0300</pubDate>
        <link>http://fernandonogueira.io/2015/07/27/chatops-comunicao-deployments-rpidos-times-satisfeitos.html</link>
        <guid isPermaLink="true">http://fernandonogueira.io/2015/07/27/chatops-comunicao-deployments-rpidos-times-satisfeitos.html</guid>
        
        <category>Hubot</category>
        
        <category>deploy</category>
        
        <category>heaven</category>
        
        <category>github</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jul 2015 11:29:10 -0300</pubDate>
        <link>http://fernandonogueira.io/jekyll/update/2015/07/05/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://fernandonogueira.io/jekyll/update/2015/07/05/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
